pipeline
{
	agent any
	options
   {
      timeout(time: 1, unit: 'HOURS')
      
      // Discard old builds after 5 days or 5 builds count.
      buildDiscarder(logRotator(daysToKeepStr: '5', numToKeepStr: '5'))
	  
	  //To avoid concurrent builds to avoid multiple checkouts
	  disableConcurrentBuilds()
   }
		 
	stages
	{
		stage ('checkout')
		{
			steps
			{
				echo  " ********** Clone starts ******************"
				checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/abhinavgoyal3149622/nagp2019-abhinavgoyal.git']]])
			}
		}
		stage ('nuget')
		{
			steps
			{
				echo "************ restoring dependancies **********"
				bat "dotnet restore"
			}
		}
		stage ('Start sonarqube analysis')
		{
			steps
			{
				echo "*********** starting sonar analysis ***********"
				withSonarQubeEnv('Test_Sonar')
			{
				bat "dotnet \"C:\\Program Files (x86)\\Jenkins\\tools\\hudson.plugins.sonar.MsBuildSQRunnerInstallation\\sonarscanner_nagp_dotnet\\SonarScanner.MSBuild.dll\" begin /k:$JOB_NAME /n:$JOB_NAME /v:1.0 "    
			}
                
			}
		}
		stage ('build')
		{
			steps
			{
				echo "************* building the solution **********"
				bat "dotnet build -c Release -o CodeRedCryptoAPI/app/build"
			}	
		}
		stage ('SonarQube Analysis end')
		{	
			steps
			{
				echo "*************** Executing Sonar analysis ***********"
			withSonarQubeEnv('Test_Sonar')
			{
				bat "dotnet \"C:\\Program Files (x86)\\Jenkins\\tools\\hudson.plugins.sonar.MsBuildSQRunnerInstallation\\sonarscanner_nagp_dotnet\\SonarScanner.MSBuild.dll\" end"
			}
			}
		}
		stage ('Release Artifacts')
		{
			steps
			{
				echo "************** Publishing app ***************"
				bat """
				rmdir /s /q CodeRedCryptoAPI/app/publish>NUL
				dotnet publish -c Release -o CodeRedCryptoAPI/app/publish
				"""
			}
		}
		stage ('Docker Image')
		{
			steps
			{
				echo "****************** Build Docker image ****************"
				bat "docker build --no-cache -t ab665083/nagp_devops:${BUILD_NUMBER} ."
			}
		}
		stage ('Push to DTR')
		{
			steps
			{
				echo "***************** Pushing image to Nagarro DTR or Docker Hub **********"
				withDockerRegistry(credentialsId:'03529a3a-484a-4655-af4f-f5d3f31b8eb2', url:'') {
				bat "docker push ab665083/nagp_devops:${BUILD_NUMBER}"
			}
			}
		}
		stage ('Stop Running container')
		{
			steps
			{
			echo "*************** Removing already running conatiners *****************"
			bat """
					@echo off
					ECHO ***Start***
					ECHO Check for all container
					docker ps -all>Containers

					for /f "tokens=1" %%r in ('FINDSTR "10800" Containers') do (
						ECHO Container Id: %%r
						SET ContainerId=%%r
						IF NOT [%ContainerId%] == [] GOTO :RemoveContainer
					)
					IF [%ContainerId%] == [] ECHO No Container Found GOTO :END
					:RemoveContainer
					docker rm -f %ContainerId%
					ECHO Container Removed

					:END
					ECHO ***End***
				"""
								
			}
		}
		stage ('Docker deployment')
		{
			steps
			{
			   echo "*************** Deploying latest war on Docker Containers **************"
			   bat "docker run --name dotnetcoreapp_abhinavgoyal -d -p 10800:10800 ab665083/nagp_devops:${BUILD_NUMBER}"
			}
		}
	}

	 post {
			always 
			{
				echo "*********** Executing post tasks like Email notifications *****************"
			}
		}
}
